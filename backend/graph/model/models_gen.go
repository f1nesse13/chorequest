// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Assignment struct {
	ID          string  `json:"id"`
	Quest       *Quest  `json:"quest"`
	ChildID     string  `json:"childId"`
	Status      string  `json:"status"`
	CreatedAt   string  `json:"createdAt"`
	CompletedAt *string `json:"completedAt,omitempty"`
}

type AvatarItem struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	PriceGold int    `json:"priceGold"`
}

type Child struct {
	ID       string `json:"id"`
	ParentID string `json:"parentId"`
	Name     string `json:"name"`
	Xp       int    `json:"xp"`
	Gold     int    `json:"gold"`
}

type Mutation struct {
}

type NewChild struct {
	ParentID string `json:"parentId"`
	Name     string `json:"name"`
}

type NewQuest struct {
	ParentID    string  `json:"parentId"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	Xp          int     `json:"xp"`
	Gold        int     `json:"gold"`
}

type NewReward struct {
	ParentID    string `json:"parentId"`
	Name        string `json:"name"`
	XpThreshold int    `json:"xpThreshold"`
}

type Query struct {
}

type Quest struct {
	ID          string  `json:"id"`
	ParentID    string  `json:"parentId"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	Xp          int     `json:"xp"`
	Gold        int     `json:"gold"`
}

type Reward struct {
	ID          string `json:"id"`
	ParentID    string `json:"parentId"`
	Name        string `json:"name"`
	XpThreshold int    `json:"xpThreshold"`
}

type SubscriptionStatus struct {
	Active           bool    `json:"active"`
	CurrentPeriodEnd *string `json:"currentPeriodEnd,omitempty"`
}

type User struct {
	ID   string `json:"id"`
	Role Role   `json:"role"`
	Name string `json:"name"`
}

type Role string

const (
	RoleParent Role = "PARENT"
	RoleChild  Role = "CHILD"
)

var AllRole = []Role{
	RoleParent,
	RoleChild,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleParent, RoleChild:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
