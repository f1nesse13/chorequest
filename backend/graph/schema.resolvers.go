package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
    "chorequest/backend/graph/model"
    "context"
    "fmt"
    "os"
    stripe "github.com/stripe/stripe-go/v76"
    "github.com/stripe/stripe-go/v76/checkout/session"
)

// CreateChild is the resolver for the createChild field.
func (r *mutationResolver) CreateChild(ctx context.Context, input model.NewChild) (*model.Child, error) {
	return r.Repo.CreateChild(ctx, input)
}

// CreateQuest is the resolver for the createQuest field.
func (r *mutationResolver) CreateQuest(ctx context.Context, input model.NewQuest) (*model.Quest, error) {
	return r.Repo.CreateQuest(ctx, input)
}

// AssignQuest is the resolver for the assignQuest field.
func (r *mutationResolver) AssignQuest(ctx context.Context, questID string, childID string) (*model.Assignment, error) {
	return r.Repo.AssignQuest(ctx, questID, childID)
}

// CreateReward is the resolver for the createReward field.
func (r *mutationResolver) CreateReward(ctx context.Context, input model.NewReward) (*model.Reward, error) {
	return r.Repo.CreateReward(ctx, input)
}

// CompleteAssignment is the resolver for the completeAssignment field.
func (r *mutationResolver) CompleteAssignment(ctx context.Context, assignmentID string) (*model.Assignment, error) {
	return r.Repo.CompleteAssignment(ctx, assignmentID)
}

// PurchaseItem is the resolver for the purchaseItem field.
func (r *mutationResolver) PurchaseItem(ctx context.Context, childID string, itemName string, priceGold int) (*model.Child, error) {
	return r.Repo.PurchaseItem(ctx, childID, itemName, priceGold)
}

// CreateCheckoutSession is the resolver for the createCheckoutSession field.
func (r *mutationResolver) CreateCheckoutSession(ctx context.Context, parentID string, successURL string, cancelURL string) (string, error) {
    secret := os.Getenv("STRIPE_SECRET")
    price := os.Getenv("STRIPE_PRICE_ID")
    if secret == "" || price == "" {
        return "https://example.com/checkout", nil
    }
    stripe.Key = secret
    params := &stripe.CheckoutSessionParams{
        Mode:       stripe.String(string(stripe.CheckoutSessionModeSubscription)),
        SuccessURL: stripe.String(successURL),
        CancelURL:  stripe.String(cancelURL),
        LineItems: []*stripe.CheckoutSessionLineItemParams{{
            Price:    stripe.String(price),
            Quantity: stripe.Int64(1),
        }},
        ClientReferenceID: stripe.String(parentID),
    }
    sess, err := session.New(params)
    if err != nil { return "", fmt.Errorf("stripe: %w", err) }
    return sess.URL, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "ok", nil
}

// Children is the resolver for the children field.
func (r *queryResolver) Children(ctx context.Context, parentID string) ([]*model.Child, error) {
	return r.Repo.ListChildren(ctx, parentID)
}

// Quests is the resolver for the quests field.
func (r *queryResolver) Quests(ctx context.Context, parentID string) ([]*model.Quest, error) {
	return r.Repo.ListQuests(ctx, parentID)
}

// Rewards is the resolver for the rewards field.
func (r *queryResolver) Rewards(ctx context.Context, parentID string) ([]*model.Reward, error) {
	return r.Repo.ListRewards(ctx, parentID)
}

// MyAssignments is the resolver for the myAssignments field.
func (r *queryResolver) MyAssignments(ctx context.Context, childID string) ([]*model.Assignment, error) {
	return r.Repo.ListAssignmentsForChild(ctx, childID)
}

// SubscriptionStatus is the resolver for the subscriptionStatus field.
func (r *queryResolver) SubscriptionStatus(ctx context.Context, parentID string) (*model.SubscriptionStatus, error) {
    // Placeholder: implement with Stripe customer/subscription lookup later
    return &model.SubscriptionStatus{Active: false, CurrentPeriodEnd: nil}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
